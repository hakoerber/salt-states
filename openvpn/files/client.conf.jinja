{% from 'states/openvpn/map.jinja' import openvpn as openvpn_map with context %}
{% from 'states/defaults.map.jinja' import defaults with context %}

port {{ vpn.port|default(openvpn_map.default_port) }}
proto {{ vpn.protocol }}
dev {{ vpn.devname }}
dev-type {{ vpn.dev }}

# files
{% if keys_inline == true %}
<ca>
{{ keys.ca }}
</ca>

<cert>
{{ keys.cert }}
</cert>

<key>
{{ keys.key }}
</key>

# tls-auth direction
key-direction 1

<tls-auth>
{{ tls-auths.tls-auth }}
</tls-auth>
{% else %}
ca {{ openvpn_map.pkidir }}/{{ vpn.name }}/ca.crt
cert {{ openvpn_map.pkidir }}/{{ vpn.name }}/client.crt
key {{ openvpn_map.pkidir }}/{{ vpn.name }}/client.key
tls-auth {{ openvpn_map.pkidir }}/{{ vpn.name }}/ta.key 1
{% endif %}

# mode and addressing
client
topology subnet
nobind

# connections
<connection>
remote {{ vpn.server.ip }}
</connection>

# connection specificy
resolv-retry infinite
{% if vpn.compress|default(openvpn_map.default_compress) %}
comp-lzo
{% endif %}
cipher {{ vpn.cipher|default(openvpn_map.default_cipher) }}
auth {{ vpn.digest|default(openvpn_map.default_digest) }}
tls-cipher {{ openvpn_map.tls_ciphers|sort|join(':') }}
ns-cert-type server

# logging
log /var/log/openvpn-{{ vpn.name }}.log
verb 4
mute 20
mute-replay-warnings

# misc
user {{ defaults.nobody }}
group {{ defaults.nogroup }}
persist-key
persist-tun

{% if advertise_subnet != {} %}
route-noexec
route-up "scripts/route-filter {{ advertise_subnet.ip }} {{ advertise_subnet.mask }}"
script-security 2
{% endif %}

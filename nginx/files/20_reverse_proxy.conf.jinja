{% from 'states/nginx/map.jinja' import nginx as nginx_map with context %}

proxy_set_header Host              $host;
proxy_set_header X-Real-IP         $remote_addr;
proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $scheme;
proxy_set_header X-Scheme          $scheme;

proxy_buffering on;

{% macro listen(target, proto) %}
{% if 'http' in proto %}
listen {{ nginx_map.ports.http }};
{% if ipv6 %}
listen [::]:{{ nginx_map.ports.http }};
{% endif %}
{% endif %}
{% if 'https' in proto %}
listen {{ nginx_map.ports.https }} ssl;
{% if ipv6 %}
listen [::]:{{ nginx_map.ports.https }} ssl;
{% endif %}
{% endif %}
{% endmacro %}

{% macro ssl(target, proto) %}
{% if 'https' in proto %}
{% if target.get('ssl_cert', false) %}
ssl_certificate {{ nginx_map.conf.confdir }}/{{ nginx_map.pki.pkidir }}/{{ target.get('ssl_domain', target.servernames[0]) }}/{{ nginx_map.pki.cert }};
ssl_certificate_key {{ nginx_map.conf.confdir }}/{{ nginx_map.pki.pkidir }}/{{ target.get('ssl_domain', target.servernames[0]) }}/{{ nginx_map.pki.key }};
{% else %}
ssl_certificate {{ nginx_map.conf.confdir }}/{{ nginx_map.pki.pkidir }}/{{ nginx_map.pki.cert }};
ssl_certificate_key {{ nginx_map.conf.confdir }}/{{ nginx_map.pki.pkidir }}/{{ nginx_map.pki.key }};
{% endif %}
{% endif %}
{% endmacro %}

{% for target in upstream %}
{% if target.protocols is defined %}
{% set proto = target.protocols %}
{% else %}
{% set proto = protocol %}
{% endif %}

server {
    {{ listen(target, proto)|indent }}
    server_name {{ target.servernames|join(' ') }};

    {{ ssl(target, proto)|indent }}

    location / {
        set $upstream "{{ target.url }}";
        proxy_pass $upstream;
    }

{% for key, value in target.get('additional_params', {}).items() %}
    {{ key }} {{ value }};
{% endfor %}

{% if acme_backend %}
    location /.well-known/acme-challenge/ {
        proxy_pass http://{{ acme_backend.ip }}/acme/$host$uri;
    }
{% endif %}
}

{% if target.get('redirect_from', None) is not none %}
{% for servername in target.servernames %}
server {
    {{ listen(target, proto)|indent }}
{% for server in target['redirect_from'] %}
    server_name {{ server }};
{% endfor %}
    return 301 $scheme://{{ servername }}$request_uri;
}
{% endfor %}
{% endif %}
{% endfor %}
